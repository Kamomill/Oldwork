package exercises.products;

import java.util.Random;
import java.util.Scanner;

import static java.lang.System.*;

/**
 * LCR Game
 * http://en.wikipedia.org/wiki/LCR_%28dice_game%29
 */
public class LCR {

    public static void main(String[] args) {
        new LCR().program();
    }

    void program() {

        final int roll = 1;    // Command for command line
        final int quit = 2;

        final int nPlayers = 3;                           // Number of players
        final char[] result = {' ', ' ', ' '};            // Results for players
        final String[] names = {"Olle", "Pelle", "Fia"};  // Player(names)
        final int[] chips = {3, 3, 3};       // Chips for players
        int actual = 0;                      // Actual player
        boolean done = false;                // Game over
        boolean aborted = false;             // Game aborted
        final char[] results = {'L', 'R', 'C', '*', '*', '*', ' '}; //Left, Right, Center, keep, keep ,keep, (no dice to roll (n/a))
        Random rand = new Random();
        Scanner scan = new Scanner(in);

        int x;
        int temp = 0;
        int dice = 0;

        out.println("LCR Game started");
        out.println("Commands are: 1 = roll, 2 = quit");
        out.println(names[0] + "=" + chips[0] + "," + names[1] + "=" + chips[1]
                + "," + names[2] + "=" + chips[2]);
        out.println(((1) + 3) % 3);
        // ---- Input  ------
        while (!done) {
            out.print("Player is " + names[actual] + " > ");
            out.println();
            int cmd = scan.nextInt();
            switch (cmd) {
                case roll:
                    // -------- Process ---------------
                    switch (chips[actual]) {
                        case 0:
                            out.println("No chips,no dice sry brah"); //Player has no chips so he cant roll
                            result[0] = results[6];
                            result[1] = results[6]; // Resets an eventual ond value
                            result[2] = results[6];
                            break;

                        default:
                            result[0] = results[6];// Resets value
                            result[1] = results[6];
                            result[2] = results[6];
                            temp = chips[actual]; // A temporary variable due to the fact that actual changes in the while, thus it is a source of error

                            while (dice < temp && dice < 3) { //dice == dice rolls
                                x = (rand.nextInt(6)); // A random number from 0-5, is to match with results[], results[6] is used as a placeholder for a un thrown dice
                                result[dice] = results[x];
                                if (x == 0) {
                                    chips[actual] = chips[actual] - 1; //-1 on actual player
                                    chips[((actual - 1) + 3) % 3] = chips[((actual - 1) + 3) % 3] + 1; // +1 on left player
                                } else if (x == 1) {
                                    chips[actual] = chips[actual] - 1; //-1 on actual player
                                    chips[(actual + 1) % 3] = chips[(actual + 1) % 3] + 1;            //+1 on right player
                                } else if (x == 2) {
                                    chips[actual] = chips[actual] - 1; //-1 on actual player
                                }
                                dice = dice + 1;
                            }
                            dice = 0;
                            break;
                    }

                    // ------ Output ----------
                    out.println("Result: " + result[0] + " " + result[1] + " " + result[2]);
                    out.println(names[0] + "=" + chips[0] + "," + names[1] + "=" + chips[1]
                            + "," + names[2] + "=" + chips[2]);
                    if (chips[0] + chips[1] + chips[2] == 1) {
                        done = true;
                    } else {
                        actual = (actual + 1) % 3; // Makes it to the next players turn
                    }

                    break;
                case quit:
                    aborted = true;
                    break;
                default:
                    out.println("?");
            }

            if (aborted) {
                break;
            }

        } // End Game loop

        if (aborted) {
            out.println("Aborted");
        } else {
            //Present the winner
            if (chips[0] == 1)
                out.println("Game over! Winner is " + names[0]);
            else if (chips[1] == 1)
                out.println("Game over! Winner is " + names[1]);
            else
                out.println("Game over! Winner is " + names[2]);

        }
    }
}
